# 1. В базе данных Redis подберите коллекцию для подсчета посещений с определенных IP-адресов.
#
# Вообщее не очень понятно что делать, там же нужна ещё какая-то обвязка кто будет посылать команды redis
# Может имеется ввиду какое-то особое, "хитрое" решение... не знаю, вообщем вот:

# Вот так мы увеличиваем счетчик по определённым ключам, IP знает само приложение 
127.0.0.1:6379> INCR ip:8.8.4.4
(integer) 1
127.0.0.1:6379> get ip:8.8.4.4
"1"
127.0.0.1:6379> INCR ip:8.8.4.4
(integer) 2
127.0.0.1:6379>
  
# Второй вариант   
# вот так мы создаем набор множество с теми IP которые разрешены в самом REDIS   
127.0.0.1:6379> SADD ip:open 192.168.1.4 192.168.1.5 8.8.4.4
(integer) 3
127.0.0.1:6379> SMEMBERS ip:open
1) "8.8.4.4"
2) "192.168.1.4"
3) "192.168.1.5"
# Вот так мы проверяем что у нас есть или нет IP любой
127.0.0.1:6379> SISMEMBER ip:open 8.8.4.4
(integer) 1
127.0.0.1:6379> SISMEMBER ip:open 8.8.4.5
(integer) 0
# Ну и если есть, то так же делаем инкримент
127.0.0.1:6379> INCR ip:8.8.4.4


# 2. При помощи базы данных Redis решите задачу поиска имени пользователя по электронному адресу и наоборот, поиск электронного адреса пользователя по его имени.
# Тут вроде понятнее. Я пошел простым путем, так как redis-у не сложно, а мне пока проще чем смотреть возможности HSCAN или SSCAN

#для каждого пользователя создаем пару ключей 
127.0.0.1:6379[1]> mset name:"andrey petrov" mail@mail.ru mail:ivanov@ya.ru "andrey ivanov"
OK
127.0.0.1:6379[1]> mset name:"ivan kolokolov" kol@ya.ru mail:kol@ya.ru "ivan kolokolov"
OK
127.0.0.1:6379[1]> mset name:"dima torn" kol@gmail.com mail:torn@gmail.com "dima torn"
OK
127.0.0.1:6379[1]> keys *
1) "name:ivan kolokolov"
2) "mail:kol@ya.ru"
3) "name:andrey petrov"
4) "name:dima torn"
5) "mail:torn@gmail.com"
6) "mail:ivanov@ya.ru"

# И простыми командами GET теперь просто получаем
127.0.0.1:6379[1]> GET name:"dima torn"
"kol@gmail.com"
127.0.0.1:6379[1]> GET mail:ivanov@ya.ru
"andrey ivanov"
127.0.0.1:6379[1]>

#Да, места надо больше и наверное есть другое решение, но сейчас место "копейки" стоит :)



# 3. Организуйте хранение категорий и товарных позиций учебной базы данных shop в СУБД MongoDB.
# 
# Господа, честно говоря я вообще не вижу смысла в таком задании на этом курсе. для чего это? В одно ухо влетит, в другое вылетит
# у меня опустились руки как только я не смог поставить mongodb на голую ubuntu из-за проблем с ключами 
# 
# Кроме того, я вообше не вижу смысла хранить в такой базе, но если вы настаиваете то вот так: 
# делаю просто в тексте без проверки
db.catalogs.insert({name: 'Процессоры',products:[]})
db.catalogs.insert({name: 'Материнские платы',products:[]})
db.catalogs.insert({name: 'Видеокарты',products:[]})
db.catalogs.insert({name: 'Жесткие диски',products:[]})
db.catalogs.insert({name: 'Оперативная память',products:[]})

#И добавляем продукты к коллекции (не уверен что именно так добавит в массив, но по иеди должен) 
db.shop.update({name: 'Процессоры'}, {$push: { 'products': {
													name:"Intel Core i3-8100",
													desription:"Процессор для настольных персональных компьютеров, основанных на платформе Intel.",
													price:7890.00,
													created_at:"2019-10-07 11:54:32",
													updated_at:"2019-10-07 11:54:32"
												} }})
# Ну и схожим образом для остальных строк												
												
